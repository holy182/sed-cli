name: SED CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sed_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: npm run build
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sed_test
    
    - name: Test database connection
      run: |
        echo "Testing SED database connection..."
        node dist/cli.js test -c sed.config.ci.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sed_test
    
    - name: Test semantic layer discovery
      run: |
        echo "Testing SED semantic layer discovery..."
        node dist/cli.js build -c sed.config.ci.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sed_test
    
    - name: Test semantic layer validation
      run: |
        echo "Testing SED semantic layer validation..."
        node dist/cli.js validate -c sed.config.ci.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sed_test
    
    - name: Test semantic layer search
      run: |
        echo "Testing SED semantic layer search..."
        node dist/cli.js search "test" -c sed.config.ci.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sed_test

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run SED security check
      run: npm run security:check
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  semantic-layer-sync:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Sync semantic layer
      run: |
        echo "Syncing SED semantic layer..."
        node dist/cli.js sync --force --verbose -c sed.config.ci.json
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    
    - name: Validate semantic layer
      run: |
        echo "üîç Validating semantic layer..."
        node dist/cli.js validate -c sed.config.ci.json
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    
    - name: Commit semantic layer changes
      if: github.event_name == 'push'
      run: |
        if git diff --quiet .sed/; then
          echo "‚úÖ No semantic layer changes to commit"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .sed/
          git commit -m "Auto-sync SED semantic layer [skip ci]"
          git push
          echo "‚úÖ Semantic layer changes committed"
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, security, semantic-layer-sync]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, terraform apply, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, terraform apply, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Deployment successful!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        # Add notification logic (Slack, email, etc.) 